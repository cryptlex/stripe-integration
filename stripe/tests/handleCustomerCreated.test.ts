import createClient from "openapi-fetch";
import { afterAll, afterEach, beforeAll, expect, test, vi } from "vitest";
import type { paths } from "@cryptlex/web-api-types"; // generated by openapi-typescript
import { server } from "../../mock-server/node";
import { baseURL as MswBaseUrl } from "../../mock-server/handlers";
import { handleCustomerCreated } from '../lib/handlers/handleCustomerCreated';

beforeAll(() => {
  // NOTE: server.listen must be called before `createClient` is used to ensure
  // the msw can inject its version of `fetch` to intercept the requests.
  server.listen({
    onUnhandledRequest: (request) => {
      throw new Error(
        `No request handler found for ${request.method} ${request.url}`
      );
    },
  });
});

afterEach(() => server.resetHandlers());
afterAll(() => server.close());

test("Handle Checkout Session Flow", async () => {
  const client = createClient<paths>({
    baseUrl: MswBaseUrl
  });

  await handleCustomerCreated({
    event: {
      "id": "evt_0QOyrHNVnO4N9Tuymgl4otnZ",
      "object": "event",
      "api_version": "2024-11-20.acacia",
      "created": 1732527931,
      "data": {
        "object": {
          "id": "cus_NffrFeUfNV2Hib",
          "object": "customer",
          "address": null,
          "balance": 0,
          "created": 1680893993,
          "currency": null,
          "default_source": null,
          "delinquent": false,
          "description": null,
          "discount": null,
          "email": "jennyrosen@example.com",
          "invoice_prefix": "0759376C",
          "invoice_settings": {
            "custom_fields": null,
            "default_payment_method": null,
            "footer": null,
            "rendering_options": null
          },
          "livemode": false,
          "metadata": {},
          "name": "Jenny Rosen",
          "next_invoice_sequence": 1,
          "phone": null,
          "preferred_locales": [],
          "shipping": null,
          "tax_exempt": "none",
          "test_clock": null

        }
      },
      "livemode": false,
      "pending_webhooks": 1,
      "request": {
        "id": null,
        "idempotency_key": null
      },
      "type": "customer.created"
    },
    client: client
  });

});